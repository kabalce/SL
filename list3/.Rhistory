l_enet1 <- select_lambda(PE_enet, X, Y)
benet1 <- glmnet(X, Y, alpha=.5, lambda = l_enet1, intercept=F, standardize=F, type.gaussian="covariance")$beta
# b
l_ridge2 <- round(cv.glmnet(X, Y, alpha=0, intercept=F, standardize=F, type.gaussian="covariance")$lambda.min, 2)
brr2 <- glmnet(X, Y, alpha=0, lambda=l_ridge2, intercept=F, standardize=F, type.gaussian="covariance")$beta
l_lasso2 <- round(cv.glmnet(X, Y, alpha=1, intercept=F, standardize=F, type.gaussian="covariance")$lambda.min, 2)
blasso2 <-  glmnet(X, Y, alpha=1, lambda = l_lasso2, intercept=F, standardize=F, type.gaussian="covariance")$beta
l_enet2 <- round(cv.glmnet(X, Y, alpha=0.5, intercept=F, standardize=F, type.gaussian="covariance")$lambda.min, 2)
benet2 <- glmnet(X, Y, alpha=.5, lambda = l_enet2, intercept=F, standardize=F, type.gaussian="covariance")$beta
# c
bls <- lm(Y~X-1)$coefficients
d <- prepare_data(Y, X)
m1 <- stepwise(d, mbic2)
bmbic2 <- rep(0, p)
bmbic2[as.numeric(m1$model)] <- lm(Y~X[, as.numeric(m1$model)]-1)$coefficients
m2 <- forward(d, aic)
baic <- rep(0, p)
baic[as.numeric(m2$model)] <- lm(Y~X[, as.numeric(m2$model)]-1)$coefficients
matrix(c(sse(beta_true, brr1), sse(X %*% beta_true, X %*% brr1),
sse(beta_true, blasso1), sse(X %*% beta_true, X %*% blasso1),
sse(beta_true, benet1), sse(X %*% beta_true, X %*% benet1),
sse(beta_true, brr2), sse(X %*% beta_true, X %*% brr2),
sse(beta_true, blasso2), sse(X %*% beta_true, X %*% blasso2),
sse(beta_true, benet2), sse(X %*% beta_true, X %*% benet2),
sse(beta_true, bls), sse(X %*% beta_true, X %*% bls),
sse(beta_true, bmbic2), sse(X %*% beta_true, X %*% bmbic2),
sse(beta_true, baic), sse(X %*% beta_true, X %*% baic)), byrow=F, nrow=2)
}
result2 <- simulation2()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(include = TRUE)
# knitr::opts_chunk$set(eval = FALSE)  # TODO: remove!!!
library(ggplot2)
library(knitr)
library(reshape2)
library(sfsmisc)
library(stringr)
library(glmnet)
library(pracma)
library(mvtnorm)
library(SLOPE)
library(lpSolve)
library(bigstep)
library(MASS)
set.seed(2022)
result2 <- readRDS("simulation2.RData")
result2
simulation3 <- function() {
n <- 1000
p <- 950
ks <- c(20, 100, 200)
lapply(ks, function(k) {
replicate(100, try(step2(k,  matrix(rnorm(n*p, 0, 1/sqrt(n)), ncol=p), rnorm(n), real_beta(k, val=5))))
})
}
result3 <- simulation3()
c(rep(val, k), rep(0, p-k))
val <- 10
c(rep(val, k), rep(0, p-k))
replicate(100, try(step2(k,  matrix(rnorm(n*p, 0, 1/sqrt(n)), ncol=p), rnorm(n), real_beta(k, p=p, val=5))))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(include = TRUE)
# knitr::opts_chunk$set(eval = FALSE)  # TODO: remove!!!
library(ggplot2)
library(knitr)
library(reshape2)
library(sfsmisc)
library(stringr)
library(glmnet)
library(pracma)
library(mvtnorm)
library(SLOPE)
library(lpSolve)
library(bigstep)
library(MASS)
set.seed(2022)
result3 <- readRDS("simulation3.RData")
results3 <- readRDS("simulation3.RData")
res3_k20_b  <- data.frame(t(results3[[1]][1, , ]))
colnames(res3_k20_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_mbic2", "LM_aic")
results3 <- readRDS("simulation3.RData")
res3_k20_b  <- data.frame(t(results3[[1]][1, , ]))
colnames(res3_k20_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_mbic2", "LM_aic")
res3_k20_y  <- data.frame(t(results3[[1]][2, , ]))
colnames(res3_k20_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res3_k100_b  <- data.frame(t(results3[[2]][1, , ]))
colnames(res3_k100_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res3_k100_y  <- data.frame(t(results3[[2]][2, , ]))
colnames(res3_k100_y) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res3_k200_b  <- data.frame(t(results3[[3]][1, , ]))
colnames(res3_k200_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res3_k200_b  <- data.frame(t(results3[[3]][1, , ]))
res3_k100_y  <- data.frame(t(results3[[2]][2, , ]))
colnames(res3_k100_y) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res3_k200_b  <- data.frame(t(results3[[3]][1, , ]))
results3[[3]]
results3[[2]]
results3[[3]]
res3_k200_b  <- data.frame(t(sapply(results3[[3]] function (x) x))
sapply(results3[[3]] function (x) x)
res3_k200_b  <- data.frame(t(sapply(results3[[3]], function (x) x)))
res3_k200_b
results3[[3]]
sapply(results3[[3]], function (x) x)
res3_k200_b  <- data.frame(t(sapply(seq(length(results3[[3]][-80])), function (x) x)))
res3_k200_b
colnames(res3_k200_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
colnames(res3_k200_y) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res3_k200_y
results3[[3]][-80]
res3_k200_y  <- data.frame(t(sapply(seq(length(results3[[3]][-80])), function (x) x[2,  ])))
res3_k200_b  <- data.frame(t(sapply(seq(length(results3[[3]][-80])), function (x) x[1,  ])))
sapply(seq(length(results3[[3]][-80])), function (x) x[1,  ]))
sapply(seq(length(results3[[3]][-80])), function (x) x[1,  ]))
sapply(seq(length(results3[[3]][-80])), function (x) x[1,  ])
results3[[3]][1]
results3[[3]][[1]]
sapply(results3[[3]][[1]],  identity)
sapply(results3[[3]][1],  identity)
sapply(results3[[3]][-80],  identity)
sapply(results3[[3]][-80],  function(x) x)
sapply(results3[[3]][-80],  function(x) x[[0]])
sapply(results3[[3]][-80],  function(x) x[[names(x)[1]]])
sapply(results3[[3]][-80],  function(x) x)
sapply(results3[[3]][-87],  function(x) x)
sapply(results3[[3]][-sapply(results3[[3]], is.matrix)],  function(x) x)
sapply(results3[[3]][-sapply(results3[[3]], is.matrix)],  function(x) x)
results3[[3]][-sapply(results3[[3]], is.matrix)
]
length(results3[[3]][-sapply(results3[[3]], is.matrix)])
length(results3[[3]][sapply(results3[[3]], is.matrix)])
sapply(results3[[3]][sapply(results3[[3]], is.matrix)],  function(x) x)
sapply(results3[[3]][sapply(results3[[3]], is.matrix)],  function(x) x[1,])
res3_k200_b  <- data.frame(t(sapply(results3[[3]][sapply(results3[[3]], is.matrix)],  function(x) x[1,])))
res3_k200_y  <- data.frame(t(sapply(results3[[3]][sapply(results3[[3]], is.matrix)],  function(x) x[2,])))
colnames(res3_k200_y) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
ggplot(data = melt(res3_k20_b), aes(x=value, color=variable, fill=variable, alpha=0.1)) +
geom_density() + labs(title="MSE of Beta for k=20")
ggplot(data = melt(res3_k20_y), aes(x=value, color=variable, fill=variable, alpha=0.1)) +
geom_density() + labs(title="MSE of prediction for k=20")
ggplot(data = melt(res3_k100_b), aes(x=value, color=variable, fill=variable, alpha=0.1)) +
geom_density() + labs(title="MSE of Beta for k=100")
ggplot(data = melt(res3_k100_y), aes(x=value, color=variable, fill=variable, alpha=0.1)) +
geom_density() + labs(title="MSE of prediction for k=100")
ggplot(data = melt(res3_k200_b), aes(x=value, color=variable, fill=variable, alpha=0.1)) +
geom_density() + labs(title="MSE of Beta for k=200")
ggplot(data = melt(res3_k200_b), aes(x=value, color=variable, fill=variable, alpha=0.1)) +
geom_density() + labs(title="MSE of Beta for k=200")
ggplot(data = melt(res3_k200_y), aes(x=value, color=variable, fill=variable, alpha=0.1)) +
geom_density() + labs(title="MSE of prediction for k=200")
ggplot(data = melt(res3_k200_y), aes(x=value, color=variable, fill=variable, alpha=0.1)) +
geom_density() + labs(title="MSE of prediction for k=200")
sum1 <- t(rbind(colMeans(res3_k20_b), colMeans(res3_k100_b), colMeans(res3_k200_b)))
sum1 <- t(rbind(colMeans(res3_k20_b), colMeans(res3_k100_b), colMeans(res3_k200_b)))
colnames(sum1) <- c(20, 100, 200)
colnames(sum1) <- c(20, 100, 200)
kable(sum1, digits=2, caption="MSE of Beta")
result4a <- readRDS("simulation4a.RData")
res4a_k20_b  <- data.frame(t(result4a[[1]][1, , ]))
colnames(res2_k20_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_mbic2", "LM_aic")
res4a_k20_b  <- data.frame(t(sapply(result4a[[1]][sapply(result4a3[[1]], is.matrix)],  function(x) x[1,])))
res4a_k20_b  <- data.frame(t(sapply(result4a[[1]][sapply(result4a[[1]], is.matrix)],  function(x) x[1,])))
colnames(res2_k20_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_mbic2", "LM_aic")
_
res4a_k20_b  <- data.frame(t(sapply(result4a[[1]][sapply(result4a[[1]], is.matrix)],  function(x) x[1,])))
colnames(res2_k20_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_mbic2", "LM_aic")
res4a_k20_b  <- data.frame(t(sapply(result4a[[1]][sapply(result4a[[1]], is.matrix)],  function(x) x[1,])))
colnames(res4a_k20_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_mbic2", "LM_aic")
res4a_k20_y  <- data.frame(t(result4a[[1]][2, , ]))
colnames(res4a_k20_y) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res4a_k20_y  <- data.frame(t(sapply(result4a[[1]][sapply(result4a[[1]], is.matrix)],  function(x) x[2, ])))
colnames(res4a_k20_y) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res4a_k20_y  <- data.frame(t(sapply(result4a[[1]][sapply(result4a[[1]], is.matrix)],  function(x) x[2, ])))
colnames(res4a_k20_y) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res4a_k20_y
res4a_k20_y
result4a
??mvrnorm
simulation4a <- function() {
n <- 1000
p <- 950
ks <- c(20, 100, 200)
Sig <- matrix(rep(0.5, p*p), ncol=p)
diag(Sig) <- 1
lapply(ks, function(k) {
beta_true <- real_beta(k, p=p)
replicate(100, try(step2(k, mvrnorm(n, rep(0, p), Sig), rnorm(n), beta_true)))
})
}
result4a <- simulation4a()
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(include = TRUE,results='asis')
knitr::opts_chunk$set(fig.width = 3.4,
fig.asp = 1.0,
out.width = "80%")
# knitr::opts_chunk$set(eval = FALSE)  # TODO: remove!!!
library(ggplot2)
library(knitr)
library(reshape2)
library(sfsmisc)
library(stringr)
library(glmnet)
library(pracma)
library(mvtnorm)
library(SLOPE)
library(lpSolve)
library(bigstep)
library(MASS)
set.seed(2022)
ggplot(data = melt(res1_k200[,c("var_rr", "var_ols")]),
aes(y=value, x=variable),alpha=0.1) +
# scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot() +
ylab("MSE")
ggplot(data = melt(res1_k200[,c("var_rr", "var_ols")]),
aes(y=value, x=variable),alpha=0.1) +
# scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot()
result1 <- readRDS("simulation1.RData")
res1_k20  <- data.frame(t(result1[, 1, ]))
res1_k100 <- data.frame(t(result1[, 2, ]))
res1_k200 <- data.frame(t(result1[, 3, ]))
cat("\n\n### Results for k=20 \n\n")
ggplot(data = melt(res1_k200[,c("var_rr", "var_ols")]),
aes(y=value, x=variable),alpha=0.1) +
# scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot()
ggplot(data = melt(res1_k200[,c("var_rr", "var_ols")]),
aes(y=value, x=variable),alpha=0.1) +
# scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot() +
ylim(c(0, 2.075)) +
ylab("MSE")+   xlab("model") +
labs(title="Variance for k=200") +
scale_x_discrete(name="model", labels=c("Ridge", "OLS"))
plot(as.vector(b_IR)~b,
main="Regression coefficients for irrepresentability",
xlab="true beta",
ylab="estimated beta")
abline(h=5)
plot(as.vector(b_IR)~b,
main="Regression coefficients for irrepresentability",
xlab="true beta",
ylab="estimated beta")
plot(as.vector(b_opt)~b,
main="Regression coefficients for identifiability",
xlab="true beta",
ylab="estimated beta")
abline(h=5)
n <- 100
p <- 200
ls <- seq(0.01, 1, 0.001)
X <- matrix(rnorm(n*p, 0, 0.1), n, p)
beta_k <- function(k, p=200, val=20) {
c(rep(val, k), rep(0, p-k))
}
irrepresentability <- function(beta, X) {
I <- beta != 0
Ic <- beta == 0
S <- as.numeric(beta >  0) - as.numeric(beta < 0)
max(t(X[, Ic]) %*% X[, I] %*% solve(t(X[, I]) %*% X[, I]) %*% as.matrix(S[I])) <= 1
}
k_IR <- max(which(sapply(1:100, function (k) irrepresentability(beta_k(k),  X))))
eps <- rnorm(n)
b <- beta_k(k_IR)
Y <- X %*% b + eps
cv_model <- cv.glmnet(X, Y, lambda=10^seq(-3,-1, by=0.001), intercept = F, standardize = F)
searchIR <- sapply(ls, function(l) {
sum((as.vector(glmnet(X, Y, lambda=l, intercept = F, standardize = F)$beta) != 0) == (b != 0))
})
opt_lambda_IR <- ls[order(searchIR)[1]]
b_IR <- glmnet(X, Y, lambda=opt_lambda_IR, intercept = F, standardize = F)$beta
plot(as.vector(b_IR)~b,
main="Regression coefficients for irrepresentability",
xlab="true beta",
ylab="estimated beta")
abline(h=5)
plot(as.vector(b_IR)~b,
main="Regression coefficients for irrepresentability",
xlab="true beta",
ylab="estimated beta")
abline(h=5)
abline(h=5, linestyle="-", color="grey")
plot(as.vector(b_IR)~b,
main="Regression coefficients for irrepresentability",
xlab="true beta",
ylab="estimated beta")
abline(h=5, linestyle="-", color="grey")
plot(as.vector(b_IR)~b,
main="Regression coefficients for irrepresentability",
xlab="true beta",
ylab="estimated beta")
abline(h=5, style="-", color="grey")
plot(as.vector(b_IR)~b,
main="Regression coefficients for irrepresentability",
xlab="true beta",
ylab="estimated beta")
abline(h=(max(b_IR[b==0])+min(b_IR[b!=0]))/2, lty="-", color="grey")
plot(as.vector(b_IR)~b,
main="Regression coefficients for irrepresentability",
xlab="true beta",
ylab="estimated beta")
abline(h=(max(b_IR[b==0])+min(b_IR[b!=0]))/2, lty=2, color="grey")
simulation4b <- function() {
n <- 1000
p <- 950
ks <- c(20, 100, 200)
Sig <- matrix(rep(0.5, p*p), ncol=p)
diag(Sig) <- 1
lapply(ks, function(k) {
beta_true <- real_beta(k, val=5, p=p)
replicate(100, try(step2(k,  mvrnorm(n, rep(0, p), Sig), rnorm(n), beta_true)))
})
}
simulation4b <- function() {
n <- 1000
p <- 950
ks <- c(20, 100, 200)
Sig <- matrix(rep(0.5, p*p), ncol=p)
diag(Sig) <- 1
lapply(ks, function(k) {
beta_true <- real_beta(k, val=5, p=p)
replicate(10, try(step2(k,  mvrnorm(n, rep(0, p), Sig), rnorm(n), beta_true)))
})
}
results4b <-simulation4b()
mvrnorm(n, rep(0, p)
mvrnorm(n, rep(0, p), Sig)
mvrnorm(n, rep(0, p), Sig)
n <- 1000
p <- 950
ks <- c(20, 100, 200)
Sig <- matrix(rep(0.5, p*p), ncol=p)
diag(Sig) <- 1
mvrnorm(n, rep(0, p), Sig)
X <- mvrnorm(n, rep(0, p), Sig)
p <- dim(X)[2]
Y <- X %*% beta_true + eps
beta_true <- beta_k(20, p)
Y <- X %*% beta_true + eps
d <- prepare_data(Y, X)
m1 <- forward(d, mbic2)
bmbic2 <- rep(0, p)
bmbic2[as.numeric(m1$model)] <- lm(Y~X[, as.numeric(m1$model)]-1)$coefficients
sse(X %*% beta_true, X %*% bmbic2)
# result4b <- readRDS("simulation4b.RData") ## TODO!!!
result4b <- readRDS("simulation4a.RData")
res4b_k20_b  <- data.frame(t(result4b[[1]][1, ,]) / p)
colnames(res4b_k20_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res4b_k20_y  <- data.frame(t(result4b[[1]][2, ,]) / n)
colnames(res4b_k20_y) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res4b_k100_b  <- data.frame(t(result4b[[2]][1, ,]) / p)
colnames(res4b_k100_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res4b_k100_y  <- data.frame(t(result4b[[2]][2, , ]) / n)
colnames(res4b_k100_y) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res4b_k200_b  <- data.frame(t(result4b[[3]][1, , ]) / p)
colnames(res4b_k200_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res4b_k200_y  <- data.frame(t(result4b[[3]][2, , ]) / n)
colnames(res4b_k200_y) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
ggplot(data = melt(res4b_k20_b), aes(y=value, x=variable),alpha=0.1) +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot() +
ylab("logMSE")+   xlab("model") +    labs(title="MSE of Beta for k=20")
ggplot(data = melt(res4b_k20_y),  aes(y=value, x=variable),alpha=0.1) +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot() +
ylab("logMSE")+   xlab("model") +    labs(title="MSE of prediction for k=20")
ggplot(data = melt(res4b_k100_b),  aes(y=value, x=variable),alpha=0.1) +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot() +
ylab("logMSE")+   xlab("model") +    labs(title="MSE of Beta for k=100")
ggplot(data = melt(res4b_k100_y),  aes(y=value, x=variable),alpha=0.1) +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot() +
ylab("logMSE")+   xlab("model") +    labs(title="MSE of prediction for k=100")
ggplot(data = melt(res4b_k200_b), aes(y=value, x=variable),alpha=0.1) +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot() +
ylab("logMSE")+   xlab("model") +    labs(title="MSE of Beta for k=200")
ggplot(data = melt(res4b_k200_y), aes(y=value, x=variable),alpha=0.1) +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot() +
ylab("logMSE")+   xlab("model") +    labs(title="MSE of prediction for k=200")
sum1 <- t(rbind(colMeans(res4b_k20_b), colMeans(res4b_k100_b), colMeans(res4b_k200_b)))
colnames(sum1) <- c(20, 100, 200)
kable(sum1, digits=2, caption="MSE of Beta")
sum1 <- t(rbind(colMeans(res4b_k20_y), colMeans(res4b_k100_y), colMeans(res4b_k200_y)))
colnames(sum1) <- c(20, 100, 200)
kable(sum1, digits=2, caption="MSE of prediction")
result4b <- readRDS("simulation4b.RData")
res4b_k20_b  <- data.frame(t(result4b[[1]][1, ,]) / p)
colnames(res4b_k20_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res4b_k20_y  <- data.frame(t(result4b[[1]][2, ,]) / n)
colnames(res4b_k20_y) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res4b_k100_b  <- data.frame(t(result4b[[2]][1, ,]) / p)
colnames(res4b_k100_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res4b_k100_y  <- data.frame(t(result4b[[2]][2, , ]) / n)
colnames(res4b_k100_y) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res4b_k200_b  <- data.frame(t(result4b[[3]][1, , ]) / p)
colnames(res4b_k200_b) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
res4b_k200_y  <- data.frame(t(result4b[[3]][2, , ]) / n)
colnames(res4b_k200_y) <- c("Ridge_sure", "LASSO_sure", "ENet_sure",
"Ridge_cv", "LASSO_cv", "ENet_cv",
"LM_OLS", "LM_mbic2", "LM_aic")
ggplot(data = melt(res4b_k20_b), aes(y=value, x=variable),alpha=0.1) +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot() +
ylab("logMSE")+   xlab("model") +    labs(title="MSE of Beta for k=20")
ggplot(data = melt(res4b_k20_y),  aes(y=value, x=variable),alpha=0.1) +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot() +
ylab("logMSE")+   xlab("model") +    labs(title="MSE of prediction for k=20")
ggplot(data = melt(res4b_k100_b),  aes(y=value, x=variable),alpha=0.1) +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot() +
ylab("logMSE")+   xlab("model") +    labs(title="MSE of Beta for k=100")
ggplot(data = melt(res4b_k100_y),  aes(y=value, x=variable),alpha=0.1) +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot() +
ylab("logMSE")+   xlab("model") +    labs(title="MSE of prediction for k=100")
ggplot(data = melt(res4b_k200_b), aes(y=value, x=variable),alpha=0.1) +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot() +
ylab("logMSE")+   xlab("model") +    labs(title="MSE of Beta for k=200")
ggplot(data = melt(res4b_k200_y), aes(y=value, x=variable),alpha=0.1) +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=.5)) +
geom_boxplot() +
ylab("logMSE")+   xlab("model") +    labs(title="MSE of prediction for k=200")
sum1 <- t(rbind(colMeans(res4b_k20_b), colMeans(res4b_k100_b), colMeans(res4b_k200_b)))
colnames(sum1) <- c(20, 100, 200)
kable(sum1, digits=2, caption="MSE of Beta")
sum1 <- t(rbind(colMeans(res4b_k20_y), colMeans(res4b_k100_y), colMeans(res4b_k200_y)))
colnames(sum1) <- c(20, 100, 200)
kable(sum1, digits=2, caption="MSE of prediction")
