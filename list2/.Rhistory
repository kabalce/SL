res2_processed
for (c in res2_processed) {
kable(res2_processed[[c]])
}
res2_processed
res2_processed[[c]]
kable(res2_processed[c])
kable(res2_processed[c], caption=str_c("Results for ", c, " criterion"))
for (c in res2_processed) {
kable(res2_processed[c], caption=str_c("Results for ", c, " criterion"))
}
for (c in res2_processed) {
show(kable(res2_processed[c], caption=str_c("Results for ", c, " criterion")))
}
for (c in res2_processed) {
show(kable(res2_processed[c], caption=paste0("Results for ", c, " criterion")))
}
paste0("Results for ", c, " criterion")
for (c in nmaes(res2_processed)) {
show(kable(res2_processed[c], caption=paste0("Results for ", c, " criterion")))
}
for (c in names(res2_processed)) {
show(kable(res2_processed[c], caption=paste0("Results for ", c, " criterion")))
}
for (c in names(res2_processed)) {
show(kable(res2_processed[c], caption=paste0("Results for ", c, " criterion"), digits=3))
}
res3 <- readRDS("results_full_3.RData")
res3
kable(res3, caption="Prediction Error for different criteria")
res3
data.frame(res3)
res3
kable(res3, caption="Prediction Error for different criteria")
data.frame(res3)
t(data.frame(res3, columns="PE")))
t(data.frame(res3, columns="PE"))
t(data.frame(res3))
kable(t(data.frame(res3)), caption="Prediction Error for different criteria")
kable(t(data.frame(res3)), caption="Prediction Error for different criteria", digits=3)
kable(t(data.frame(res3)), caption="Prediction Error for different criteria", digits=3, row.names = "PE")
kable(t(data.frame(res3)), caption="Prediction Error for different criteria", digits=3, row.names = F)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(include = TRUE)
knitr::opts_chunk$set(fig.width = 10, fig.height = 5)
library(ggplot2)
library(knitr)
library(reshape2)
library(sfsmisc)
library(stringr)
library(bigstep)
set.seed(2022)
for (c in names(res2_processed)) {
show(kable(res2_processed[c], caption=paste0("Results for ", c, " criterion"), digits=3) %>%
kable_styling(latex_options = "HOLD_position"))
}
??kable_styling
librray(kableExtra)
library(kableExtra)
install.packages("kableExtra")
install.packages("kableExtra")
library(kableEctra)
library(kableExtra)
install.packages("kableExtra")
install.packages(‘xml2’, ‘rvest’, ‘svglite’,"kableExtra")
install.packages("xml2", "rvest", "svglite","kableExtra")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(include = TRUE)
knitr::opts_chunk$set(fig.width = 10, fig.height = 5)
library(ggplot2)
library(knitr)
library(reshape2)
library(sfsmisc)
library(stringr)
library(bigstep)
set.seed(2022)
print(kable(res2_processed, caption=paste0("Results for ", c, " criterion"), digits=3, position = "!h", booktabs = TRUE, valign = 't'))
print(kables(res2_processed, caption=paste0("Results for ", c, " criterion"), digits=3, position = "!h", booktabs = TRUE, valign = 't'))
print(kable(res2_processed, caption=paste0("Results for ", c, " criterion"), digits=3, position = "!h", booktabs = TRUE, valign = 't'))
names(res2_processed)
result
tmp
res2 <- readRDS("results_full_2.RData")
res2_950 <- readRDS("results_950_2.RData")
res2_950AIC <- readRDS("results_950_AIC_2.RData")
prep_data2 <- function(i, metric_names, res) {
tmp <- res[((i-1) * length(metric_names) + 1):(i * length(metric_names)), , ]
tmp[3, , ] <- t(mp[3, , ] - tmp[1, , ]) / 5
result <- sapply(1:(dim(tmp)[2]), function(j)
rowMeans(tmp[, j, ]))
rownames(result) <- metric_names
colnames(result) <- qs[1:(dim(result)[2])]
result
}
dim_names <- c("FP", "FN", "power", "SSE")
res2_processed <- lapply(1:(dim(res2)[1] / length(dim_names)), function (i) prep_data2(i, dim_names, res2))
res2 <- readRDS("results_full_2.RData")
res2_950 <- readRDS("results_950_2.RData")
res2_950AIC <- readRDS("results_950_AIC_2.RData")
prep_data2 <- function(i, metric_names, res) {
tmp <- res[((i-1) * length(metric_names) + 1):(i * length(metric_names)), , ]
tmp[3, , ] <- (tmp[3, , ] - tmp[1, , ]) / 5
result <- sapply(1:(dim(tmp)[2]), function(j)
rowMeans(tmp[, j, ]))
rownames(result) <- metric_names
colnames(result) <- qs[1:(dim(result)[2])]
result
}
dim_names <- c("FP", "FN", "power", "SSE")
res2_processed <- lapply(1:(dim(res2)[1] / length(dim_names)), function (i) prep_data2(i, dim_names, res2))
names(res2_processed) <- names(sapply(crits, function(c) substitute(c)))
res22_950 <- rbind(res2_950[1:4, 1, ], res2_950AIC[1:4, , ],
res2_950[5:16, , ])
dim(res22_950) <- c(20, 1, 100)
results950 <- rowMeans(res22_950)
for( i in 1:length(res2_processed)) {
n <- colnames(res2_processed[[names(res2_processed)[i]]] )
res2_processed[[names(res2_processed)[i]]] <- cbind(res2_processed[[names(res2_processed)[i]]], results950[((i-1) * 4 + 1):(i*4)])
colnames(res2_processed[[names(res2_processed)[i]]] ) <- c(n, 950)
}
for (c in names(res2_processed)) {
cat('\n\n<!-- -->\n\n')
print(kable(res2_processed[c], caption=paste0("Results for ", c, " criterion"), digits=3, position = "!hb", booktabs = TRUE, valign = 't', , format = "latex"))
}
res2_950
tmp
tmp[3, , ] - tmp[1, , ]
tmp[3, , ]
res22_950
res2_950
res22_950
calculations1_1 <- function() {
n <- dim(X)[1]
p <- dim(X)[2]
model <- lm(Y ~ X - 1)
b_hat <- model$coefficients
c(AIC1=AIC1(X, Y, b_hat, sig),
AIC2=AIC2(X, Y, b_hat))
}
step1_1 <- function() {
X <- matrix(rnorm(n*p, 0, 1 / sqrt(n)), n, p)
eps <- rnorm(n)
Y <- X %*% bet + eps
eps_new <- rnorm(1000)
sapply(1:950, function(q) calculations1_1(X[, 1:q], Y, bet[1:q], eps_new, sig=1))
}
replicate(100, step1_1())
n <- 1000
p <- 950
qs <- c(2, 5, 10, 100, 500, 950)
bet <- c(rep(3, 5), rep(0, p - 5))
calculations1_1 <- function() {
n <- dim(X)[1]
p <- dim(X)[2]
model <- lm(Y ~ X - 1)
b_hat <- model$coefficients
c(AIC1=AIC1(X, Y, b_hat, sig),
AIC2=AIC2(X, Y, b_hat))
}
step1_1 <- function() {
X <- matrix(rnorm(n*p, 0, 1 / sqrt(n)), n, p)
eps <- rnorm(n)
Y <- X %*% bet + eps
eps_new <- rnorm(1000)
sapply(1:950, function(q) calculations1_1(X[, 1:q], Y, bet[1:q], eps_new, sig=1))
}
res1_1 <- replicate(100, step1_1())
calculations1_1 <- function(X, Y, b_hat, eps, sig) {
n <- dim(X)[1]
p <- dim(X)[2]
model <- lm(Y ~ X - 1)
b_hat <- model$coefficients
c(AIC1=AIC1(X, Y, b_hat, sig),
AIC2=AIC2(X, Y, b_hat))
}
step1_1 <- function() {
X <- matrix(rnorm(n*p, 0, 1 / sqrt(n)), n, p)
eps <- rnorm(n)
Y <- X %*% bet + eps
eps_new <- rnorm(1000)
sapply(1:950, function(q) calculations1_1(X[, 1:q], Y, bet[1:q], eps_new, sig=1))
}
res1_1 <- replicate(100, step1_1())
calculations1_1 <- function(X, Y, b_hat, eps, sig) {
n <- dim(X)[1]
p <- dim(X)[2]
model <- lm(Y ~ X - 1)
b_hat <- model$coefficients
c(AIC1=AIC1(X, Y, b_hat, sig),
AIC2=AIC2(X, Y, b_hat))
}
step1_1 <- function() {
X <- matrix(rnorm(n*p, 0, 1 / sqrt(n)), n, p)
eps <- rnorm(n)
Y <- X %*% bet + eps
eps_new <- rnorm(1000)
sapply(1:950, function(q) calculations1_1(X[, 1:q], Y, bet[1:q], eps_new, sig=1))
}
res1_1 <- replicate(100, step1_1())
X <- matrix(rnorm(n*p, 0, 1 / sqrt(n)), n, p)
eps <- rnorm(n)
Y <- X %*% bet + eps
eps_new <- rnorm(1000)
sapply(1:950, function(q) calculations1_1(X[, 1:q], Y, bet[1:q], eps_new, sig=1))
n <- dim(X)[1]
p <- dim(X)[2]
model <- lm(Y ~ X - 1)
c(AIC1=AIC1(X, Y, b_hat, sig),
AIC2=AIC2(X, Y, b_hat))
n <- dim(X)[1]
p <- dim(X)[2]
-n * log(sqrt(2 * pi)) - RSS(X, Y, b_hat) / 2 / sig - p
-n
RSS(X, Y, b_hat)
calculations1_1 <- function(X, Y, b, eps_new, sig) {
n <- dim(X)[1]
p <- dim(X)[2]
model <- lm(Y ~ X - 1)
b_hat <- model$coefficients
c(AIC1=AIC1(X, Y, b_hat, sig),
AIC2=AIC2(X, Y, b_hat))
}
step1_1 <- function() {
X <- matrix(rnorm(n*p, 0, 1 / sqrt(n)), n, p)
eps <- rnorm(n)
Y <- X %*% bet + eps
eps_new <- rnorm(1000)
sapply(1:950, function(q) calculations1_1(X[, 1:q], Y, bet[1:q], eps_new, sig=1))
}
res1_1 <- replicate(100, step1_1())
RSS <- function(X, Y, b_hat) {
sum((Y - X %*% b_hat) ^2)
}
PE <- function(X, b_hat, b, eps_new) {
sum((X %*% (b - b_hat) + eps_new) ^2)
}
PE_1 <- function(X, Y, b_hat, sig) {
p <- dim(X)[2]
RSS(X, Y, b_hat) + 2 * p * sig
}
PE_2 <- function(X, Y, b_hat) {
n <- dim(X)[1]
p <- dim(X)[2]
RSS(X, Y, b_hat) * (n + p) / (n - p)
}
PE_CV <- function(X, Y, b_hat) {
H <- X %*% solve(t(X) %*% X) %*% t(X)
sum(((Y - X %*% b_hat) / (1 - diag(H))) ^2)
}
AIC1 <- function(X, Y, b_hat, sig) {
n <- dim(X)[1]
print(n)
p <- dim(X)[2]
-n * log(sqrt(2 * pi)) - RSS(X, Y, b_hat) / 2 / sig - p
}
AIC2 <- function(X, Y, b_hat) {
n <- dim(X)[1]
p <- dim(X)[2]
-n * log(sqrt(2 * pi)) - n/2 * log(RSS(X, Y, b_hat)) - p
}
res1_1 <- replicate(100, step1_1())
RSS <- function(X, Y, b_hat) {
sum((Y - X %*% b_hat) ^2)
}
PE <- function(X, b_hat, b, eps_new) {
sum((X %*% (b - b_hat) + eps_new) ^2)
}
PE_1 <- function(X, Y, b_hat, sig) {
p <- dim(X)[2]
RSS(X, Y, b_hat) + 2 * p * sig
}
PE_2 <- function(X, Y, b_hat) {
n <- dim(X)[1]
p <- dim(X)[2]
RSS(X, Y, b_hat) * (n + p) / (n - p)
}
PE_CV <- function(X, Y, b_hat) {
H <- X %*% solve(t(X) %*% X) %*% t(X)
sum(((Y - X %*% b_hat) / (1 - diag(H))) ^2)
}
AIC1 <- function(X, Y, b_hat, sig) {
print(X)
n <- dim(X)[1]
p <- dim(X)[2]
-n * log(sqrt(2 * pi)) - RSS(X, Y, b_hat) / 2 / sig - p
}
AIC2 <- function(X, Y, b_hat) {
n <- dim(X)[1]
p <- dim(X)[2]
-n * log(sqrt(2 * pi)) - n/2 * log(RSS(X, Y, b_hat)) - p
}
res1_1 <- replicate(100, step1_1())
calculations1_1 <- function(X, Y, b, eps_new, sig) {
n <- dim(X)[1]
p <- dim(X)[2]
model <- lm(Y ~ X - 1)
b_hat <- model$coefficients
c(AIC1=AIC1(X, Y, b_hat, sig),
AIC2=AIC2(X, Y, b_hat))
}
step1_1 <- function() {
X <- matrix(rnorm(n*p, 0, 1 / sqrt(n)), n, p)
eps <- rnorm(n)
Y <- X %*% bet + eps
eps_new <- rnorm(1000)
sapply(1:950, function(q) calculations1_1(as.matyrix(X[, 1:q]), Y, bet[1:q], eps_new, sig=1))
}
res1_1 <- replicate(100, step1_1())
calculations1_1 <- function(X, Y, b, eps_new, sig) {
n <- dim(X)[1]
p <- dim(X)[2]
model <- lm(Y ~ X - 1)
b_hat <- model$coefficients
c(AIC1=AIC1(X, Y, b_hat, sig),
AIC2=AIC2(X, Y, b_hat))
}
step1_1 <- function() {
X <- matrix(rnorm(n*p, 0, 1 / sqrt(n)), n, p)
eps <- rnorm(n)
Y <- X %*% bet + eps
eps_new <- rnorm(1000)
sapply(1:950, function(q) calculations1_1(as.matrix(X[, 1:q]), Y, bet[1:q], eps_new, sig=1))
}
res1_1 <- replicate(100, step1_1())
calculations1_1 <- function(X, Y, b, eps_new, sig) {
n <- dim(X)[1]
p <- dim(X)[2]
model <- lm(Y ~ X - 1)
b_hat <- model$coefficients
c(AIC1=AIC1(X, Y, b_hat, sig),
AIC2=AIC2(X, Y, b_hat))
}
step1_1 <- function() {
X <- matrix(rnorm(n*p, 0, 1 / sqrt(n)), n, p)
eps <- rnorm(n)
Y <- X %*% bet + eps
eps_new <- rnorm(1000)
sapply(1:950, function(q) calculations1_1(as.matrix(X[, 1:q]), Y, bet[1:q], eps_new, sig=1))
}
res1_1 <- replicate(100, step1_1())
RSS <- function(X, Y, b_hat) {
sum((Y - X %*% b_hat) ^2)
}
PE <- function(X, b_hat, b, eps_new) {
sum((X %*% (b - b_hat) + eps_new) ^2)
}
PE_1 <- function(X, Y, b_hat, sig) {
p <- dim(X)[2]
RSS(X, Y, b_hat) + 2 * p * sig
}
PE_2 <- function(X, Y, b_hat) {
n <- dim(X)[1]
p <- dim(X)[2]
RSS(X, Y, b_hat) * (n + p) / (n - p)
}
PE_CV <- function(X, Y, b_hat) {
H <- X %*% solve(t(X) %*% X) %*% t(X)
sum(((Y - X %*% b_hat) / (1 - diag(H))) ^2)
}
AIC1 <- function(X, Y, b_hat, sig) {
n <- dim(X)[1]
p <- dim(X)[2]
-n * log(sqrt(2 * pi)) - RSS(X, Y, b_hat) / 2 / sig - p
}
AIC2 <- function(X, Y, b_hat) {
n <- dim(X)[1]
p <- dim(X)[2]
-n * log(sqrt(2 * pi)) - n/2 * log(RSS(X, Y, b_hat)) - p
}
calculations1_1 <- function(X, Y, b, eps_new, sig) {
n <- dim(X)[1]
p <- dim(X)[2]
model <- lm(Y ~ X - 1)
b_hat <- model$coefficients
c(AIC1=AIC1(X, Y, b_hat, sig),
AIC2=AIC2(X, Y, b_hat))
}
step1_1 <- function() {
X <- matrix(rnorm(n*p, 0, 1 / sqrt(n)), n, p)
eps <- rnorm(n)
Y <- X %*% bet + eps
eps_new <- rnorm(1000)
sapply(1:950, function(q) calculations1_1(as.matrix(X[, 1:q]), Y, bet[1:q], eps_new, sig=1))
}
res1_1 <- replicate(100, step1_1())
res2
res2[5:8, , ]
res2[5, , ]
FP <- t(res2[5, , ])
FP
res2_950AIC
res2_950AIC[1, , ]
FP <- data.frame(cbind(t(res2[5, , ]), res2_950AIC[1, , ]))
colnames(FP) <- qs
FP
res2[5, , ]
t(res2[5, , ]),
t(res2[5, , ])
res2_950AIC[1, , ]
FP <- data.frame(cbind(t(res2[5, , ]), res2_950AIC[1, , ]))
FP
qs
qs <- c(20, 100, 500, 950)
crits <- c(BIC=bic, AIC=aic, RIC=function(loglik, k, p) {2 * k * log(p) - 2 * loglik}, mBIC=mbic, mBIC2=mbic2)
colnames(FP) <- qs
FP
melt(FP)
ggplot(melt(FP), aex(x="value", hue="variable") + geom_hist()
ggplot(melt(FP), aex(x="value", hue="variable") + geom_hist()
ggplot(melt(FP), aex(x="value", hue="variable")) + geom_hist()
ggplot(melt(FP), aes(x="value", hue="variable")) + geom_hist()
ggplot(melt(FP), aes(x="value", hue="variable")) + geom_histogram()
ggplot(melt(FP), aes(x="value", hue="variable")) + geom_histogram(stat="count")
ggplot(melt(FP), aes(x="value", hue="variable")) + geom_histogram()
melt(FP)
FP
ggplot(as.numeric(melt(FP)), aes(x="value", hue="variable")) + geom_histogram()
as.numeric(melt(FP))
FP <- data.frame(as.numeric(cbind(t(res2[5, , ]), res2_950AIC[1, , ])))
colnames(FP) <- qs
ggplot(melt(FP), aes(x="value", hue="variable")) + geom_histogram()
FP <- data.frame(as.numeric(cbind(t(res2[5, , ]), res2_950AIC[1, , ])))
FP <- data.frame(as.numeric(cbind(t(res2[5, , ]), res2_950AIC[1, , ])))
FP
FP <- data.frame(cbind(t(res2[5, , ]), res2_950AIC[1, , ]))
colnames(FP) <- qs
ggplot(melt(FP), aes(x="value", hue="variable")) + geom_histogram()
FP
FP$20
FP$`20`
class(FP$`20`)
colnames(FP) <-as.character(qs)
ggplot(melt(FP), aes(x="value", hue="variable")) + geom_histogram()
melt(FP)
melt(FP)$value
class(melt(FP)$value)
ggplot(melt(FP), aes(x="value", color="variable")) + geom_histogram()
ggplot(melt(FP), aes(x="value")) + geom_histogram()
melt(FP)
FP <- melt(FP)
ggplot(FP, aes(x="value", color="variable")) + geom_histogram()
FP
FP$value <- as.numeric(value)
FP$value <- as.numeric(FP$value)
ggplot(FP, aes(x="value", color="variable")) + geom_histogram()
FP$variable <- as.character(FP$variable)
ggplot(FP, aes(x="value", color="variable")) + geom_histogram()
FP <- data.frame(cbind(t(res2[5, , ]), res2_950AIC[1, , ]))
colnames(FP) <-as.character(qs)
FP <- melt(FP)
FP$variable <- as.character(FP$variable)
FP$value <- as.numeric(FP$value)
ggplot(FP, aes(x="value", color="variable")) + geom_histogram()
ggplot(FP, aes(x="value", color="variable")) + geom_freqpoly()
ggplot(FP, aes(y="value", color="variable")) + geom_freqpoly()
ggplot(FP, aes(x="value", color="variable")) + geom_freqpoly()
histogram(FP$value, FP$variable)
FP <- data.frame(cbind(t(res2[5, , ]), res2_950AIC[1, , ]))
FP <- melt(FP)
FP$value <- as.numeric(FP$value)
FP
ggplot(FP, aes(x="value", color="variable")) + geom_freqpoly()
FP$value <- as.numeric(FP$value)
FP
ggplot(FP, aes(x=value, color=variable)) + geom_freqpoly()
ggplot(FP, aes(x=value, color=variable)) + geom_histogram()
ggplot(FP, aes(x=value, fill=variable)) + geom_histogram()
qs
FP <- data.frame(cbind(t(res2[5, , ]), res2_950AIC[1, , ]))
colnames(FP) <-as.character(qs)
ggplot(FP, aes(x=20) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=20", subtitle = "sigma unknown")
ggplot(FP, aes(x=100) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=100", subtitle = "sigma unknown")
ggplot(FP, aes(x=950) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=950", subtitle = "sigma unknown")
FP <- data.frame(cbind(t(res2[5, , ]), res2_950AIC[1, , ]))
FP <- data.frame(cbind(t(res2[5, , ]), res2_950AIC[1, , ]))
colnames(FP) <-as.character(qs)
ggplot(FP, aes(x=20) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=20", subtitle ="sigma unknown")
ggplot(FP, aes(x=100) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=100", subtitle = "sigma unknown")
FP <- data.frame(cbind(t(res2[5, , ]), res2_950AIC[1, , ]))
colnames(FP) <-as.character(qs)
ggplot(FP, aes(x=20) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=20", subtitle ="sigma unknown")
ggplot(FP, aes(x=500) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=500", subtitle = "sigma unknown")
FP <- data.frame(cbind(t(res2[5, , ]), res2_950AIC[1, , ]))
colnames(FP) <-as.character(qs)
ggplot(FP, aes(x=20)) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=20", subtitle ="sigma unknown")
ggplot(FP, aes(x=100)) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=100", subtitle = "sigma unknown")
ggplot(FP, aes(x=500)) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=500", subtitle = "sigma unknown")
ggplot(FP, aes(x=950)) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=950", subtitle = "sigma unknown")
FP <- data.frame(cbind(t(res2[5, , ]), res2_950AIC[1, , ]))
FP
colnames(FP) <-as.character(qs)
FP
ggplot(FP, aes(x=20)) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=20", subtitle ="sigma unknown")
FP
ggplot(FP, aes(x=`20`)) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=20", subtitle ="sigma unknown")
FP <- data.frame(cbind(t(res2[5, , ]), res2_950AIC[1, , ]))
colnames(FP) <-as.character(qs)
ggplot(FP, aes(x=`20`)) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=20", subtitle ="sigma unknown")
ggplot(FP, aes(x=`100`)) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=100", subtitle = "sigma unknown")
ggplot(FP, aes(x=`500`)) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=500", subtitle = "sigma unknown")
ggplot(FP, aes(x=`950`)) + geom_histogram() + labs(title="Histogram of the number of false discoveries for p=950", subtitle = "sigma unknown")
ggplot(FN, aes(x=`20`)) + geom_histogram() + labs(title="Histogram of FN for p=20", subtitle ="sigma unknown") + scale_x_discrete()
FN <- data.frame(cbind(t(res2[6, , ]), res2_950AIC[2, , ]))
ggplot(FN, aes(x=`20`)) + geom_histogram() + labs(title="Histogram of FN for p=20", subtitle ="sigma unknown") + scale_x_discrete()
FN <- data.frame(cbind(t(res2[6, , ]), res2_950AIC[2, , ]))
colnames(FN) <-as.character(qs)
ggplot(FP, aes(x=`20`)) + geom_histogram() + labs(title="Histogram of FP for p=20", subtitle ="sigma unknown")
ggplot(FN, aes(x=`20`)) + geom_histogram() + labs(title="Histogram of FN for p=20", subtitle ="sigma unknown") + scale_x_discrete()
